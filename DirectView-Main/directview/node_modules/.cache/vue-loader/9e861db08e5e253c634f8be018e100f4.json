{"remainingRequest":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/src/views/adminPages/Messages.vue?vue&type=template&id=13852023&","dependencies":[{"path":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/src/views/adminPages/Messages.vue","mtime":1572266654000},{"path":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alyssagable/projects/mgmcovid/DirectView-Main/directview/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}